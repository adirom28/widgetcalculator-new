package com.allcarstransport.server.services.implementation;import com.allcarstransport.server.services.EmailService;import com.allcarstransport.server.dtos.email.EmailBookingNotifyRequest;import com.allcarstransport.server.dtos.email.EmailNotifyRequest;import com.allcarstransport.server.dtos.email.EmailSendGridRequest;import com.fasterxml.jackson.databind.ObjectMapper;import com.sendgrid.Method;import com.sendgrid.Request;import com.sendgrid.Response;import com.sendgrid.SendGrid;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Value;import org.springframework.cglib.beans.BeanMap;import org.springframework.stereotype.Service;import java.io.IOException;import java.util.Collections;import java.util.HashMap;import java.util.Map;@Servicepublic class EmailServiceImpl implements EmailService {    public static final Logger logger = LoggerFactory.getLogger(EmailServiceImpl.class);    @Value("${sales.email}")    private String salesEmail;    @Value("${email.notifications.enabled}")    private boolean isNotificationEnabled;    @Value("${user.reset.password.link}")    private String resetPasswordLink;    private final ObjectMapper mapper;    private final SendGrid sendGrid;    public EmailServiceImpl(ObjectMapper mapper, SendGrid sendGrid) {        this.mapper = mapper;        this.sendGrid = sendGrid;    }    @Override    public void sendNotifications(EmailNotifyRequest request) {        BeanMap.Generator generator = new BeanMap.Generator();        generator.setBean(request);        generator.setBeanClass(EmailNotifyRequest.class);        BeanMap variablesMap = generator.create();        send(salesEmail, request.getClientEmail(), "Transport notification", "d-55f6aee881ea45819fdf591148fa73e9", variablesMap);        logger.info("Email sent to customer");        send(salesEmail, salesEmail, "Transport notification", "d-55f6aee881ea45819fdf591148fa73e9", variablesMap);        logger.info("Email sent to sales with email:{}", salesEmail);    }    @Override    public void sendResetPasswordEmail(String token, String email) {        Map<String, Object> variablesMap = new HashMap<>();        variablesMap.put("link", resetPasswordLink.replace("<token>", token));        send(salesEmail, email, "Reset password", "d-9b95d35d3fe04e179c5c0d362332f136", variablesMap);        logger.info("Email sent to customer");    }    @Override    public void sendBookingNotifications(EmailBookingNotifyRequest bookingNotifyRequest) {        BeanMap.Generator generator = new BeanMap.Generator();        generator.setBean(bookingNotifyRequest);        generator.setBeanClass(EmailBookingNotifyRequest.class);        BeanMap variablesMap = generator.create();        Map<String, Object> map = new HashMap<>();        map.put("data", variablesMap.toString());        send(salesEmail, salesEmail, "Transport booking" , "d-cdd81c8825354c4697dec3c003a816ce", map);        logger.info("Email sent to sales with email:{}", salesEmail);        send(salesEmail, bookingNotifyRequest.getClientEmail(), "Transport booking", "d-cdd81c8825354c4697dec3c003a816ce", variablesMap);        logger.info("Booking email sent to customer");    }    private void send(String fromEmail, String toEmail, String subject, String templateId, Map<String, Object> data) {        if (!isNotificationEnabled) {            logger.info("Email notification is disabled.");        }        try {            EmailSendGridRequest emailSendGridRequest = new EmailSendGridRequest();            EmailSendGridRequest.EmailInfo fromEmailInfo = new EmailSendGridRequest.EmailInfo("All Cars Transport", fromEmail);            emailSendGridRequest.setFrom(fromEmailInfo);            emailSendGridRequest.setReplyTo(fromEmailInfo);            emailSendGridRequest.setTemplateId(templateId);            EmailSendGridRequest.Personalization personalization = new EmailSendGridRequest.Personalization();            EmailSendGridRequest.EmailInfo toEmailInfo = new EmailSendGridRequest.EmailInfo("", toEmail);            personalization.setTo(Collections.singletonList(toEmailInfo));            personalization.setSubject(subject);            data.put("subject", subject);            personalization.setData(data);            emailSendGridRequest.setPersonalizations(Collections.singletonList(personalization));            Request request = new Request();            request.setMethod(Method.POST);            request.setEndpoint("mail/send");            request.setBody(mapper.writeValueAsString(emailSendGridRequest));            Response response = sendGrid.api(request);            logger.info(response.getBody());        } catch (IOException ex) {            throw new RuntimeException(ex);        }    }}